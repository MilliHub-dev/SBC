#!/usr/bin/env node

/**
 * Sabi Ride Web3 Setup Script
 * Helps configure the application for deployment
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ Sabi Ride Web3 Setup Script');
console.log('=====================================\n');

// Configuration
const CONFIG = {
  CONTRACT_ADDRESS: '0x53308b85F0Fceadfc0a474eb0c196F0F02CD4983',
  NETWORK: 'polygon-zkevm-testnet',
  CHAIN_ID: 1442,
};

// Check if running in project root
function checkProjectRoot() {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    console.error('‚ùå Please run this script from the project root directory');
    process.exit(1);
  }
  
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  if (packageJson.name !== 'sabi-cash') {
    console.error('‚ùå This doesn\'t appear to be the Sabi Cash project');
    process.exit(1);
  }
  
  console.log('‚úÖ Project root verified');
}

// Verify contract configuration
function verifyContractConfig() {
  const web3ConfigPath = path.join(process.cwd(), 'src', 'config', 'web3Config.js');
  if (!fs.existsSync(web3ConfigPath)) {
    console.error('‚ùå Web3 config file not found');
    process.exit(1);
  }
  
  const configContent = fs.readFileSync(web3ConfigPath, 'utf8');
  if (configContent.includes(CONFIG.CONTRACT_ADDRESS)) {
    console.log('‚úÖ ThirdWeb contract address configured correctly');
  } else {
    console.warn('‚ö†Ô∏è  Contract address might not be configured correctly');
  }
}

// Check database schema
function checkDatabaseSchema() {
  const schemaPath = path.join(process.cwd(), 'database', 'neon-schema.sql');
  const minimalSchemaPath = path.join(process.cwd(), 'database', 'neon-minimal-schema.sql');
  if (fs.existsSync(schemaPath)) {
    console.log('‚úÖ Neon database schema found');
  } else if (fs.existsSync(minimalSchemaPath)) {
    console.log('‚úÖ Neon minimal database schema found (no PII)');
  } else {
    console.error('‚ùå Database schema file missing');
  }
}

// Verify API configuration
function verifyApiConfig() {
  const apiConfigPath = path.join(process.cwd(), 'src', 'config', 'apiConfig.js');
  if (fs.existsSync(apiConfigPath)) {
    console.log('‚úÖ API configuration file found');
  } else {
    console.error('‚ùå API configuration file missing');
  }
}

// Create environment template
function createEnvTemplate() {
  const envExamplePath = path.join(process.cwd(), '.env.example');
  const envPath = path.join(process.cwd(), '.env');
  
  if (!fs.existsSync(envPath)) {
    if (fs.existsSync(envExamplePath)) {
      console.log('üìù Creating .env file from template...');
      
      let envContent = `# Sabi Ride Web3 Environment Configuration
# Generated by setup script

# API Configuration
VITE_API_BASE_URL=http://localhost:8000/api
VITE_APP_ENV=development

# Web3 Configuration
VITE_WALLETCONNECT_PROJECT_ID=2f05ae7f1116030fde2d36508f472bfb
VITE_THIRDWEB_CLIENT_ID=your_thirdweb_client_id_here

# Contract Addresses (ThirdWeb)
VITE_SABI_CASH_CONTRACT=${CONFIG.CONTRACT_ADDRESS}
VITE_USDT_CONTRACT=0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035

# Network Configuration
VITE_DEFAULT_CHAIN_ID=${CONFIG.CHAIN_ID}
VITE_NETWORK_NAME=${CONFIG.NETWORK}

# Point System Configuration
VITE_POINTS_PER_KM=1
VITE_MIN_POINT_CONVERSION=500
VITE_POINT_TO_SABI_RATE=0.5
`;
      
      fs.writeFileSync(envPath, envContent);
      console.log('‚úÖ .env file created');
    } else {
      console.warn('‚ö†Ô∏è  No .env.example found, skipping .env creation');
    }
  } else {
    console.log('‚úÖ .env file already exists');
  }
}

// Display deployment checklist
function displayChecklist() {
  console.log('\nüìã Deployment Checklist:');
  console.log('========================');
  console.log('‚ñ° Set up Neon database using:');
  console.log('   - database/neon-schema.sql (full) OR');
  console.log('   - database/neon-minimal-schema.sql (no PII)');
  console.log('‚ñ° Configure environment variables in .env');
  console.log('‚ñ° Implement backend API (see doc/BACKEND_API_INTEGRATION.md)');
  console.log('‚ñ° Deploy frontend to Vercel/Netlify');
  console.log('‚ñ° Test wallet connection and login flows');
  console.log('‚ñ° Verify point conversion functionality');
  console.log('‚ñ° Test admin panel access');
  console.log('‚ñ° Set up monitoring and analytics');
}

// Display contract information
function displayContractInfo() {
  console.log('\nüîó Smart Contract Information:');
  console.log('==============================');
  console.log(`Contract Address: ${CONFIG.CONTRACT_ADDRESS}`);
  console.log(`Network: ${CONFIG.NETWORK}`);
  console.log(`Chain ID: ${CONFIG.CHAIN_ID}`);
  console.log('Contract Type: ERC-20 (ThirdWeb)');
  console.log('Blockchain: Polygon zkEVM');
}

// Display next steps
function displayNextSteps() {
  console.log('\nüéØ Next Steps:');
  console.log('===============');
  console.log('1. Set up your Neon database:');
  console.log('   # Full schema:');
  console.log('   psql "your_neon_connection_string" < database/neon-schema.sql');
  console.log('   # OR Minimal (no PII):');
  console.log('   psql "your_neon_connection_string" < database/neon-minimal-schema.sql');
  console.log('');
  console.log('2. Configure your environment:');
  console.log('   cp .env.example .env');
  console.log('   # Edit .env with your actual values');
  console.log('');
  console.log('3. Install dependencies and start development:');
  console.log('   npm install');
  console.log('   npm run dev');
  console.log('');
  console.log('4. Implement backend API:');
  console.log('   # See doc/BACKEND_API_INTEGRATION.md for complete guide');
  console.log('');
  console.log('5. Deploy to production:');
  console.log('   npm run build');
  console.log('   # Deploy dist/ folder to your hosting provider');
}

// Main setup function
function main() {
  try {
    checkProjectRoot();
    verifyContractConfig();
    checkDatabaseSchema();
    verifyApiConfig();
    createEnvTemplate();
    displayContractInfo();
    displayChecklist();
    displayNextSteps();
    
    console.log('\nüéâ Setup completed successfully!');
    console.log('Your Sabi Ride Web3 platform is ready for deployment.');
    
  } catch (error) {
    console.error('\n‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

// Run setup
main();
